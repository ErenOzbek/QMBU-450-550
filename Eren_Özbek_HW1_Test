{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 1,
   "metadata": {},
   "outputs": [],
   "source": [
    "#I assume that all of the transactions are done within a fiscal year so I don't add year\n",
    "class Date(): #Defining the class Date so that we can decide if we receive dividends\n",
    "    def __init__(self, month, day):\n",
    "        self.month = month\n",
    "        self.day = day       \n",
    "    def today_date(self):\n",
    "        self.month = '0'*(2-len(str(self.month)))+str(self.month)\n",
    "        self.day = '0'*(2-len(str(self.day)))+str(self.day)\n",
    "        return self.month+'/'+self.day\n",
    "        \n",
    "class Cash():\n",
    "    liquidity= 3\n",
    "    def __init__(self):\n",
    "        pass\n",
    "\n",
    "class Stock():\n",
    "    liquidity= 2\n",
    "    def __init__(self, price, ticker, exchange):\n",
    "        self.price = price\n",
    "        self.ticker = ticker\n",
    "        self.exchange= exchange\n",
    "\n",
    "class MutualFund():\n",
    "    liquidity=1\n",
    "    def __init__(self, ticker, price=1):\n",
    "        self.price = price\n",
    "        self.ticker= ticker\n",
    "\n",
    "class Bond(Stock):\n",
    "    liquidity=2\n",
    "    def __init__(self, price, ticker, exchange, coupon_payment):\n",
    "        Stock.__init__(self, price, ticker, exchange)\n",
    "        self.coupon_payment= coupon_payment\n",
    "        \n",
    "from random import uniform\n",
    "\n",
    "class Portfolio():\n",
    "    def __init__(self, Name):\n",
    "        self.Name = Name\n",
    "        self.cash_balance= 0\n",
    "        self.my_stocks={}\n",
    "        self.my_funds= {}\n",
    "        self.my_bonds={}\n",
    "        self.transaction_history=[]\n",
    "        self.stock_amount=0\n",
    "        self.fund_share=0\n",
    "        self.bond_amount=0\n",
    "    \n",
    "    def addCash(self, cash_input, Date):\n",
    "        self.cash_balance += cash_input\n",
    "        self.transaction_history.append('Cash input of $%d ' %cash_input + 'on '+ Date.today_date())\n",
    "        return 'Your current cash balance is %d as of ' %self.cash_balance +Date.today_date()\n",
    "    \n",
    "    def withdrawCash(self, cash_output, Date):\n",
    "        self.cash_balance -= cash_output\n",
    "        self.transaction_history.append('Cash output of $%d ' %cash_output + 'on '+ Date.today_date())\n",
    "        return 'Your current cash balance is %d as of ' %self.cash_balance +Date.today_date()\n",
    "        \n",
    "    def buyStock(self, Stock, stock_amount, Date):\n",
    "        self.stock_amount += stock_amount\n",
    "        self.my_stocks[Stock.ticker]= stock_amount\n",
    "        self.transaction_cost= stock_amount*Stock.price\n",
    "        self.cash_balance -= self.transaction_cost\n",
    "        self.transaction_history.append('%d shares of ' %stock_amount + Stock.ticker + ' is bought at ' +Stock.exchange+ ' for $ %d' %self.transaction_cost + ' on ' +Date.today_date())\n",
    "        print ('Stocks you possess are ', self.my_stocks)\n",
    "    \n",
    "    def sellStock(self, Stock, stock_amount, Date):\n",
    "        self.stock_amount -= stock_amount\n",
    "        self.my_stocks[Stock.ticker] = stock_amount\n",
    "        if int(Date.month) >= 9: #we assume a hypothetical dividend randomly chosen by board of directors and it is only given to the ones who sell their stocks after september\n",
    "            self.transaction_gain = stock_amount*(Stock.price*uniform(0.5, 1.5) + uniform(Stock.price*0.01, Stock.price*0.1))\n",
    "        else:\n",
    "            self.transaction_gain = stock_amount*Stock.price*uniform(0.5, 1.5)      \n",
    "        self.cash_balance += self.transaction_cost\n",
    "        self.transaction_history.append('%d shares of ' %stock_amount + Stock.ticker + ' is sold at ' +Stock.exchange+ ' for $ %d' %self.transaction_gain + ' on ' +Date.today_date())\n",
    "        print ('Stocks you possess are ', self.my_stocks)\n",
    "    \n",
    "    def buyMutualFund(self, MutualFund, fund_share, Date):\n",
    "        self.fund_share += fund_share\n",
    "        self.my_funds[MutualFund.ticker] = fund_share\n",
    "        self.transaction_cost = fund_share*MutualFund.price\n",
    "        self.cash_balance -= self.transaction_cost\n",
    "        self.transaction_history.append('%d shares of ' %fund_share + MutualFund.ticker + ' is bought for $ %d' %self.transaction_cost + ' on ' +Date.today_date())\n",
    "        print ('Mutual Funds you possess are ', self.my_funds)\n",
    "    \n",
    "    def sellMutualFund(self, MutualFund, fund_share, Date):\n",
    "        self.fund_share -= fund_share\n",
    "        self.my_funds[MutualFund.ticker] = fund_share\n",
    "        self.transaction_gain= fund_share*MutualFund.price*uniform(0.9, 1.2)\n",
    "        self.cash_balance += self.transaction_cost\n",
    "        self.transaction_history.append('%d shares of ' %fund_share + MutualFund.ticker + ' is sold for $ %d' %self.transaction_gain + ' on ' +Date.today_date())\n",
    "        print ('Mutual Funds you possess are ', self.my_funds)\n",
    "    \n",
    "    def buyBond(self, Bond, bond_amount, Date):\n",
    "        self.bond_amount += bond_amount\n",
    "        self.my_bonds[Bond.ticker] = bond_amount\n",
    "        self.transaction_cost= bond_amount*Bond.price\n",
    "        self.cash_balance -= self.transaction_cost\n",
    "        self.cash_balance += Bond.coupon_payment\n",
    "        self.transaction_history.append('%d shares of ' %bond_amount + Bond.ticker + ' is bought at ' +Bond.exchange+ ' for $ %d' %self.transaction_cost + ' on ' +Date.today_date())\n",
    "        print ('Bonds you possess are ', self.my_bonds)\n",
    "    \n",
    "    def sellBond(self, Bond, bond_amount, Date):\n",
    "        self.bond_amount -= bond_amount\n",
    "        self.my_bonds[Bond.ticker] = bond_amount\n",
    "        self.transaction_gain= bond_amount*Bond.price\n",
    "        self.cash_balance += self.transaction_gain\n",
    "        self.transaction_history.append('%d shares of ' %bond_amount + Bond.ticker + ' is sold at ' +Bond.exchange+ ' for $ %d' %self.transaction_cost + ' on ' +Date.today_date())\n",
    "        print ('Bonds you possess are ', self.my_bonds)\n",
    "    \n",
    "    def transactions(self):\n",
    "        print(self.transaction_history)\n",
    "    \n",
    "    def in_cash(self, Stock, MutualFund, Bond):\n",
    "        total_stock=0\n",
    "        for key in self.my_stocks.keys():\n",
    "            total_stock += Stock.price*self.my_stocks[key]*uniform(0.5, 1.5)\n",
    "        total_fund=0\n",
    "        for key in self.my_funds.keys():\n",
    "            total_fund += MutualFund.price*self.my_funds[key]* uniform(0.9, 1.2)\n",
    "        total_bond=0\n",
    "        for key in self.my_bonds.keys():\n",
    "            total_bond += Bond.price*self.my_bonds[key]* uniform(0.95, 1.15)\n",
    "        self.in_cash= self.cash_balance+total_stock+total_fund+total_bond\n",
    "        return self.in_cash\n",
    "    \n",
    "    def liquidity_check(self):\n",
    "        if float(self.cash_balance)/float(self.in_cash) < 0.25:\n",
    "            print('Your liquidity is low, consider to sell some of your stocks or funds in case of need for cash')\n",
    "        elif 0.25 <= float(self.cash_balance)/float(self.in_cash) < 0.75:\n",
    "             print('Your liquidity is fine, have fun!')\n",
    "        else:\n",
    "            print('You have too much cash, consider to invest it for future gain')\n",
    "    \n",
    "    def whats_up(self):\n",
    "        print(f\"\"\"Here is what you have:\n",
    "              Your cash is ${self.cash_balance}\n",
    "              Your stocks are {self.my_stocks}\n",
    "              Your mutual funds are {self.my_funds}\n",
    "              Your bonds are {self.my_bonds}\n",
    "              Your assets' current value is ${self.in_cash}\n",
    "              {self.liquidity_check()}\"\"\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "metadata": {},
   "outputs": [],
   "source": [
    "portfolio= Portfolio('My Portfolio')\n",
    "today= Date(3, 8)\n",
    "future= Date(10, 27)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "'Your current cash balance is 300 as of 03/08'"
      ]
     },
     "execution_count": 3,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "portfolio.addCash(300.5, today)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "metadata": {},
   "outputs": [],
   "source": [
    "s=Stock(20, \"HFH\", \"NYSE\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Stocks you possess are  {'HFH': 5}\n"
     ]
    }
   ],
   "source": [
    "portfolio.buyStock(s, 5, today)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "metadata": {},
   "outputs": [],
   "source": [
    "mf1= MutualFund(\"BRT\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "metadata": {},
   "outputs": [],
   "source": [
    "mf2= MutualFund(\"GHT\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Mutual Funds you possess are  {'BRT': 10.3}\n"
     ]
    }
   ],
   "source": [
    "portfolio.buyMutualFund(mf1, 10.3, today)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 11,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Mutual Funds you possess are  {'BRT': 10.3, 'GHT': 2}\n"
     ]
    }
   ],
   "source": [
    "portfolio.buyMutualFund(mf2, 2, today)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 13,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Mutual Funds you possess are  {'BRT': 3, 'GHT': 2}\n"
     ]
    }
   ],
   "source": [
    "portfolio.sellMutualFund(mf1, 3, today)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 14,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Mutual Funds you possess are  {'BRT': 3, 'GHT': 2}\n"
     ]
    }
   ],
   "source": [
    "portfolio.sellMutualFund(mf2, 2, today)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 16,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "'Your current cash balance is 140 as of 03/08'"
      ]
     },
     "execution_count": 16,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "portfolio.withdrawCash(50, today)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 17,
   "metadata": {},
   "outputs": [],
   "source": [
    "b= Bond(3, 'ART', 'BIST', 18)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 18,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Bonds you possess are  {'ART': 4}\n"
     ]
    }
   ],
   "source": [
    "portfolio.buyBond(b, 4, today)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 20,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "['Cash input of $300 on 03/08', '5 shares of HFH is bought at NYSE for $ 100 on 03/08', '10 shares of BRT is bought for $ 10 on 03/08', '2 shares of GHT is bought for $ 2 on 03/08', '2 shares of GHT is bought for $ 2 on 03/08', '3 shares of BRT is sold for $ 3 on 03/08', '2 shares of GHT is sold for $ 2 on 03/08', 'Cash output of $50 on 03/08', '4 shares of ART is bought at BIST for $ 12 on 03/08']\n"
     ]
    }
   ],
   "source": [
    "portfolio.transactions()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 22,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "233.22437884732054"
      ]
     },
     "execution_count": 22,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "portfolio.in_cash(s, mf1, b)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 23,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Your liquidity is fine, have fun!\n",
      "Here is what you have:\n",
      "              Your cash is $146.2\n",
      "              Your stocks are {'HFH': 5}\n",
      "              Your mutual funds are {'BRT': 3, 'GHT': 2}\n",
      "              Your bonds are {'ART': 4}\n",
      "              Your assets' current value is $233.22437884732054\n",
      "              None\n"
     ]
    }
   ],
   "source": [
    "portfolio.whats_up()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.8.5"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 4
}
